
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author noelm
 */
public class manage_watchlist extends javax.swing.JFrame {

    /**
     * Creates new form manage_watchlist
     */
    public manage_watchlist() {
        initComponents();
        fetchAndDisplayMovies();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFrame1 = new javax.swing.JFrame();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();

        jFrame1.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Event Name", "Description", "Date", "Time", "Venue", "Ticket Pricing"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Edit");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Delete");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Exit");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(jFrame1Layout.createSequentialGroup()
                .addGap(152, 152, 152)
                .addComponent(jButton3)
                .addGap(90, 90, 90)
                .addComponent(jButton1)
                .addGap(82, 82, 82)
                .addComponent(jButton2)
                .addContainerGap(181, Short.MAX_VALUE))
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrame1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addGroup(jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addGap(0, 87, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(java.awt.Color.orange);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Movie Name", "Genre", "Director", "Release year", "Description"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        jButton4.setText("Exit");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Edit");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Delete");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(414, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton6)
                    .addComponent(jButton5)
                    .addComponent(jButton4))
                .addGap(383, 383, 383))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 863, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addComponent(jButton5)
                .addGap(29, 29, 29)
                .addComponent(jButton6)
                .addGap(31, 31, 31)
                .addComponent(jButton4))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // Get the selected row
        int selectedRow = jTable1.getSelectedRow();

        // Check if a row is selected
        if (selectedRow >= 0) {
            // Get data from the selected row
        String moviename = (String) jTable1.getValueAt(selectedRow, 0);
        String genre = (String) jTable1.getValueAt(selectedRow, 1);
        String director = (String) jTable1.getValueAt(selectedRow, 2);
        String releaseyear = (String) jTable1.getValueAt(selectedRow, 3);
        String moviedescription = (String) jTable1.getValueAt(selectedRow, 4);

        // Open the edit_movies form and set the data
        edit_movies editForm = new edit_movies(this);
        editForm.setMovieData(moviename, genre, director, releaseyear, moviedescription);
        editForm.setVisible(true);
        } else {
            // No row selected, show an error message or handle it appropriately
            JOptionPane.showMessageDialog(this, "Please select a row to edit.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        // Get the selected row
        int selectedRow = jTable1.getSelectedRow();

        // Check if a row is selected
        if (selectedRow >= 0) {
            // Get the event name from the selected row
         String moviename = (String) jTable1.getValueAt(selectedRow, 0);

        // Confirm the deletion with the user
        int option = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this movie?", "Confirm Deletion", JOptionPane.YES_NO_OPTION);
        if (option == JOptionPane.YES_OPTION) {
            // Call the delete method in the manage_movies class
            deleteMovie(moviename);

            // Refresh the table after deletion
            fetchAndDisplayMovies();;
            }
        } else {
            // No row selected, show an error message or handle it appropriately
            JOptionPane.showMessageDialog(this, "Please select a row to delete.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        Dashboard dashboardForm = new Dashboard();

        // Set the DashboardForm to visible
        dashboardForm.setVisible(true);

        // Dispose of the current events_view form
        dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        Dashboard dashboardForm = new Dashboard();

        // Set the DashboardForm to visible
        dashboardForm.setVisible(true);

        // Dispose of the current events_view form
        dispose();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // Get the selected row
        int selectedRow = jTable2.getSelectedRow();

        // Check if a row is selected
        // Check if a row is selected
            if (selectedRow >= 0) {
            // Get data from the selected row
            String moviename = (String) jTable2.getValueAt(selectedRow, 0);
            
            String genre = (String) jTable2.getValueAt(selectedRow, 1);
            String director = (String) jTable2.getValueAt(selectedRow, 2);
            String releaseyear = (String) jTable2.getValueAt(selectedRow, 3);
            String moviedescription = (String) jTable2.getValueAt(selectedRow, 4);

            // Open the edit_movies form and set the data
            edit_movies editForm = new edit_movies(this);
            editForm.setMovieData(moviename, genre, director, releaseyear, moviedescription);
            editForm.setVisible(true);
    } else {
        // No row selected, show an error message or handle it appropriately
        JOptionPane.showMessageDialog(this, "Please select a row to edit.", "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        // Get the selected row
        int selectedRow = jTable2.getSelectedRow();

        // Check if a row is selected
        if (selectedRow >= 0) {
            // Get the event name from the selected row
            String eventName = (String) jTable2.getValueAt(selectedRow, 0);

            // Confirm the deletion with the user
            int option = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this event?", "Confirm Deletion", JOptionPane.YES_NO_OPTION);
            if (option == JOptionPane.YES_OPTION) {
                // Call the delete method in the manage_events class
                deleteMovie(eventName);

                // Refresh the table after deletion
                fetchAndDisplayMovies();
            }
        } else {
            // No row selected, show an error message or handle it appropriately
            JOptionPane.showMessageDialog(this, "Please select a row to delete.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void deleteMovie(String eventName) {
        // Database connection parameters
            String url = "jdbc:mysql://localhost/stockmanage";
            String username = "root";
            String password = "";

        try (Connection connection = DriverManager.getConnection(url, username, password)) {
            String query = "DELETE FROM movie_details WHERE moviename=?";

            try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
                preparedStatement.setString(1, eventName);
                preparedStatement.executeUpdate();
            }
        } 
        catch (SQLException ex) {
            ex.printStackTrace();
            // Handle exceptions appropriately, e.g., show an error message
        }
    }
    
    
    private void fetchAndDisplayMovies() {
        // Database connection parameters
        String url = "jdbc:mysql://localhost/stockmanage";
        String username = "root";
        String password = "";

        try (Connection connection = DriverManager.getConnection(url, username, password)) {
        String query = "SELECT moviename, genre, director, releaseyear, moviedescription FROM movie_details";
            try (PreparedStatement preparedStatement = connection.prepareStatement(query);
             ResultSet resultSet = preparedStatement.executeQuery()) {

                // Create a DefaultTableModel to store the data for the table
                DefaultTableModel model = new DefaultTableModel();

                // Add column names to the model
                model.addColumn("Movie Name");
                model.addColumn("Genre");
                model.addColumn("Director");
                model.addColumn("Release Year");
                model.addColumn("Description");

                // Iterate through the result set and add rows to the model
                while (resultSet.next()) {
                    Object[] row = new Object[]{
                        resultSet.getString("moviename"),
                        resultSet.getString("genre"),
                        resultSet.getString("director"),
                        resultSet.getString("releaseyear"),
                        resultSet.getString("moviedescription")
                    };
                    model.addRow(row);
                }

                // Set the model for the jTable1
                jTable2.setModel(model);
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            // Handle exceptions appropriately, e.g., show an error message
        }
    }
    
    
    public static void updateDatabase(String moviename, String movieDescription, String genre, String director, String releaseyear) {
    String url = "jdbc:mysql://localhost/stockmanage";
    String username = "root";
    String password = "";

    try (Connection connection = DriverManager.getConnection(url, username, password)) {
        String query = "UPDATE movie_details SET moviedescription=?, genre=?, director=?, releaseyear=? WHERE moviename=?";

        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
            preparedStatement.setString(1, movieDescription);
            preparedStatement.setString(2, genre);
            preparedStatement.setString(3, director);
            preparedStatement.setString(4, releaseyear);
            preparedStatement.setString(5, moviename);

            preparedStatement.executeUpdate();
        }
    } catch (SQLException ex) {
        ex.printStackTrace();
        // Handle exceptions appropriately, e.g., show an error message
    }
}
    
    void updateAndRefreshTable() {
    // Call the fetchAndDisplayEvents method to refresh the table
    fetchAndDisplayMovies();
        }

    /**
     * @param args the command line arguments
     */
    
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(manage_watchlist.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(manage_watchlist.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(manage_watchlist.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(manage_watchlist.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new manage_watchlist().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    // End of variables declaration//GEN-END:variables
}
